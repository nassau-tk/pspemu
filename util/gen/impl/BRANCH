@BEQ // Branch on Equal
	branch((cast(int)RS) == cast(int)RT);

@BNE // Branch on Not Equal
	branch((cast(int)RS) != cast(int)RT);

@BEQL // Branch on Equal Likely
	branchl((cast(int)RS) == cast(int)RT);
	
@BNEL // Branch on Not Equal Likely
	branchl((cast(int)RS) != cast(int)RT);

@BLEZ // Branch on Less Than or Equal to Zero
	branch((cast(int)RS) <= 0);

@BGTZ // Branch on Greater Than Zero
	branch((cast(int)RS) > 0);

@BLEZL // Branch on Less Than or Equal to Zero Likely
	branchl((cast(int)RS) <= 0);

@BGTZL // Branch on Greater Than Zero Likely
	branchl((cast(int)RS) >  0);
	
@BGEZ // Branch on Greater Equal Zero
	branch((cast(int)RS)  >= 0);

@BGEZL // Branch on Greater Equal Likely
	branchl((cast(int)RS) >= 0);

@BGEZAL // Branch on Greater Equal Zero And Link
	// Unimplemented
	
@BLTZ // Branch on Lesser Than Zero
	branch((cast(int)RS)  < 0);

@BLTZL // Branch on Lesser Than Zero Likely
	branchl((cast(int)RS) < 0);

@BLTZAL // Branch on Lesser Than Zero And Link
	// Unimplemented

@BLTZALL // Branch on Lesser Than Zero And Link Likely
	// Unimplemented
