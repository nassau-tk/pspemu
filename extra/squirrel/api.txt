class Bitmap {
	// With and height of the image.
	w; h;

	// Center of the image.
	cx; cy;

	// Creates an empty bitmap.
	constructor(width, height, bpp);

	// Loads a bitmap from a file: BMP, JPG or PNG.
	static function fromFile(filename);

	// Draws the bitmap in the specified coords.
	function draw(x, y);

	// Obtains a slice of the bitmap.
	function slice(x, y, w, h);

	// Sets the center of the image and return the image itself.
	function center(cx, cy);

	// Sets the center of the image and return the image itself.
	//   (0, 0) center is in the top left corner
	//   (1, 1) center is in the bottom right corner
	//   (0.5, 0.5) center is in the center of the image
	function centerf(cx, cy);
}

class TileMap {
	// Width and height of the image.
	w; h;

	constructor(width, height, V);

	function set(x, y, V);
	function setRect(x0, y0, x1, y1, V);
	function get(x, y);

	// Used for pathfinding (wall=1, floor=0)
	function setBlockInfo(block, V);
	function getBlockInfo(block);

	// Search a path using A* from (sx, sy) to (dx, dy)
	function pathFind(sx, sy, dx, dy, diagonals = 1);

	function draw(bitmap, tile_w = 32, tile_h = 32, repeat_x = 1, repeat_y = 1, put_x = 0, put_y = 0, scroll_x = 0, scroll_y = 0, scroll_w = 16, scroll_h = 16, alpha = 1.0, margin_x = 0, margin_y = 0);
}

/*
db <- Sqlite("file.db");

db.query("CREATE TABLE records (name, points);");
db.query("INSERT INTO records (name, points) VALUES (?, ?);", ["soywiz", 999]);
db.query("INSERT INTO records (name, points) VALUES (?, ?);", ["nobody", 1000]);

foreach (n, row in db.query("SELECT * FROM records ORDER BY points DESC;")) {
	printf("Register(%d): %s, %d\n", n, row.name, row.points);
}
*/
class Sqlite {
	last_insert_id;
	
	constructor(file = ":memory:");
	function query(sql, params);
}

// Sets the current color.
// colorf([1, 0, 0, 0.5]); // semi-transparent red
function colorf(color);

// Sets the current color.
// color(0x7F0000FF); // semi-transparent red
function color(color);

// Draws a line with the current color.
function line(x1, y1, x2, y2);

// Draws a point with the current color.
function point(x, y);

// Clear the frame buffer.
function clear();

// Finalizes the current drawing, wait for vsync, swap the buffers and start a new drawing.
function frame();

// Exits the game.
function exit();

// Sleep a number of milliseconds
function sleep(milliseconds);

function printf();
